openapi: 3.0.0
info:
  title: E-commerce API
  version: 1.0.0
  description: API documentation for the e-commerce system

servers:
  - url: https://wxw-project.onrender.com

security:
  - bearerAuth: []   # Apply JWT auth globally unless overridden

paths:

  # AUTH
  /api/auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password, role]
              properties:
                name: { type: string }
                email: { type: string, format: email }
                password: { type: string, format: password }
                role:
                  type: string
                  enum: [admin, seller, buyer]
      responses:
        "201":
          description: User created successfully
        "400":
          description: Invalid inputs

  /api/auth/login:
    post:
      tags: [Auth]
      summary: Login an existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string, format: password }
      responses:
        "200":
          description: Login successful, returns JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
        "401":
          description: Invalid credentials

  # PRODUCTS
  /api/products:
    get:
      tags: [Products]
      summary: Get all products
      responses:
        "200":
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      tags: [Products]
      summary: Create a new product (admin or seller)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, description, price, stock, categoryId]
              properties:
                name: { type: string }
                description: { type: string }
                price: { type: number, format: float }
                stock: { type: integer }
                categoryId: { type: integer }
                coverImage: { type: string, format: uri, nullable: true }
      responses:
        "201":
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "401":
          description: Unauthorized

  /api/products/{id}:
    parameters:
      - in: path
        name: id
        schema: { type: integer }
        required: true
    get:
      tags: [Products]
      summary: Get product by ID
      responses:
        "200":
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "404":
          description: Product not found
    put:
      tags: [Products]
      summary: Update a product (admin or seller)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                description: { type: string }
                price: { type: number, format: float }
                stock: { type: integer }
                categoryId: { type: integer }
                coverImage: { type: string, format: uri, nullable: true }
      responses:
        "200":
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Product not found
    delete:
      tags: [Products]
      summary: Delete a product (admin or seller)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Product deleted
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Product not found

  # REVIEWS
  /api/products/{productId}/reviews:
    parameters:
      - in: path
        name: productId
        schema: { type: integer }
        required: true
    post:
      tags: [Reviews]
      summary: Create a review for a product (authenticated users)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [rating, comment]
              properties:
                rating: { type: integer, minimum: 1, maximum: 5 }
                comment: { type: string }
      responses:
        "201":
          description: Review added
        "401":
          description: Unauthorized

  # ORDERS
  /api/orders:
    post:
      tags: [Orders]
      summary: Place an order (authenticated users)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [shippingAddress, paymentMethod]
              properties:
                shippingAddress: { type: string }
                paymentMethod: { type: string }
      responses:
        "201":
          description: Order created
        "401":
          description: Unauthorized
    get:
      tags: [Orders]
      summary: Get all orders for current user (authenticated)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of user orders

  /api/orders/{id}:
    parameters:
      - in: path
        name: id
        schema: { type: integer }
        required: true
    put:
      tags: [Orders]
      summary: Update order status (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isPaid: { type: boolean }
                isDelivered: { type: boolean }
      responses:
        "200":
          description: Order updated
        "401":
          description: Unauthorized
        "403":
          description: Forbidden

  # PAYMENTS
  /api/payments/{orderId}/generate-code:
    post:
      tags: [Payments]
      summary: Generate MoMo payment code (authenticated)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: orderId
          schema: { type: integer }
          required: true
      responses:
        "200":
          description: Payment code generated

  /api/payments/{orderId}/confirm-client:
    post:
      tags: [Payments]
      summary: Confirm payment by client (authenticated)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: orderId
          schema: { type: integer }
          required: true
      responses:
        "200":
          description: Client payment confirmed

  /api/payments/{orderId}/confirm-admin:
    post:
      tags: [Payments]
      summary: Confirm payment by admin (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: orderId
          schema: { type: integer }
          required: true
      responses:
        "200":
          description: Admin payment confirmation done
        "403":
          description: Forbidden

  # CATEGORIES
  /api/categories:
    get:
      tags: [Categories]
      summary: Get all categories
      responses:
        "200":
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    post:
      tags: [Categories]
      summary: Create a new category (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string }
      responses:
        "201":
          description: Category created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden

  /api/categories/{id}:
    parameters:
      - in: path
        name: id
        schema: { type: integer }
        required: true
    get:
      tags: [Categories]
      summary: Get category by ID
      responses:
        "200":
          description: Category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        "404":
          description: Category not found
    put:
      tags: [Categories]
      summary: Update a category (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string }
      responses:
        "200":
          description: Category updated
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
    delete:
      tags: [Categories]
      summary: Delete a category (admin only)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Category deleted
        "401":
          description: Unauthorized
        "403":
          description: Forbidden

  # NOTIFICATIONS
  /api/notifications:
    get:
      tags: [Notifications]
      summary: Get notifications for current user or admin (authenticated)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of notifications

  /api/notifications/{id}/read:
    put:
      tags: [Notifications]
      summary: Mark a notification as read (authenticated)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema: { type: integer }
          required: true
      responses:
        "200":
          description: Notification marked as read

  # CART
  /api/orders/cart:
    get:
      tags: [Cart]
      summary: Get current user cart (authenticated)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User cart details
    post:
      tags: [Cart]
      summary: Add or update product in cart (authenticated)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [productId, quantity]
              properties:
                productId: { type: integer }
                quantity: { type: integer }
      responses:
        "200":
          description: Cart updated

  /api/orders/cart/remove:
    delete:
      tags: [Cart]
      summary: Remove product from cart (authenticated)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [productId]
              properties:
                productId: { type: integer }
      responses:
        "200":
          description: Product removed from cart

  # DASHBOARDS
  /api/admin/dashboard:
    get:
      tags: [Dashboard]
      summary: Admin dashboard info (admin only)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Admin welcome message

  /api/seller/dashboard:
    get:
      tags: [Dashboard]
      summary: Seller dashboard info (seller only)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Seller welcome message

  /api/buyer/dashboard:
    get:
      tags: [Dashboard]
      summary: Buyer dashboard info (buyer only)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Buyer welcome message

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Product:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        description: { type: string }
        price: { type: number, format: float }
        stock: { type: integer }
        categoryId: { type: integer }
        coverImage: { type: string, format: uri, nullable: true }
        createdById: { type: integer }
    Category:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
